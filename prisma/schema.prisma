generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String?
  role                    String
  passwordHash            String
  photoUrl                String?
  childProfile            String?
  createdAt               DateTime                 @default(now())
  icsToken                String?                  @unique
  language                String?
  appointmentsAsParent    Appointment[]            @relation("apptParent")
  appointmentsAsTherapist Appointment[]            @relation("apptTherapist")
  auditLogs               AuditLog[]
  clockEntries            ClockEntry[]
  comments                Comment[]
  dailyLogsAuthored       DailyLog[]
  rsvps                   EventRsvp[]
  messagesRecv            Message[]                @relation("messagesRecv")
  messagesSent            Message[]                @relation("messagesSent")
  messageTemplates        MessageTemplate[]
  notifications           Notification[]
  preferences             NotificationPreference[]
  posts                   Post[]
  likes                   PostLike[]
  profileChangeRequests   ProfileChangeRequest[]
  progressReportsAuthored ProgressReport[]
  studentsAsBcba          Student[]                @relation("bcba")
  studentsAsPmTherapist   Student[]                @relation("pmTherapist")
  studentsAsAmTherapist   Student[]                @relation("amTherapist")
  studentsAsParent        Student[]                @relation("parent")
  notesAuthored           StudentNote[]
  availability            TherapistAvailability[]
  urgentMemoReceipts      UrgentMemoReceipt[]
  workShifts              WorkShift[]
  // Inverse relations for invites (creator & consumer)
  invitesCreated          Invite[]               @relation("inviteCreator")
  invitesConsumed         Invite[]               @relation("inviteConsumer")
}

model Message {
  id          String              @id @default(cuid())
  senderId    String
  receiverId  String
  content     String
  mediaUrl    String?
  mediaType   String?
  iv          String?
  createdAt   DateTime            @default(now())
  readAt      DateTime?
  channel     String              @default("DIRECT")
  receiver    User                @relation("messagesRecv", fields: [receiverId], references: [id])
  sender      User                @relation("messagesSent", fields: [senderId], references: [id])
  attachments MessageAttachment[]
}

model MessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  url       String
  mimeType  String
  duration  Int?
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])
}

model Post {
  id        String     @id @default(cuid())
  authorId  String
  title     String
  body      String
  imageUrl  String?
  fileUrl   String?
  createdAt DateTime   @default(now())
  pinned    Boolean    @default(false)
  category  String?
  tags      String?
  published Boolean    @default(true)
  publishAt DateTime?
  comments  Comment[]
  author    User       @relation(fields: [authorId], references: [id])
  likes     PostLike[]

  @@index([publishAt])
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  body      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  payload   String
  channel   String
  status    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model PostLike {
  postId    String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@id([postId, userId])
}

model Student {
  id            String           @id @default(cuid())
  name          String
  parentId      String
  amTherapistId String
  pmTherapistId String
  bcbaId        String?
  createdAt     DateTime         @default(now())
  photoUrl      String?
  appointments  Appointment[]
  dailyLogs     DailyLog[]
  progress      ProgressReport[]
  bcba          User?            @relation("bcba", fields: [bcbaId], references: [id])
  pmTherapist   User             @relation("pmTherapist", fields: [pmTherapistId], references: [id])
  amTherapist   User             @relation("amTherapist", fields: [amTherapistId], references: [id])
  parent        User             @relation("parent", fields: [parentId], references: [id])
  notes         StudentNote[]
  workShifts    WorkShift[]
}

model UrgentMemo {
  id           String              @id @default(cuid())
  title        String
  body         String
  active       Boolean             @default(true)
  audience     String
  targetUserId String?
  createdAt    DateTime            @default(now())
  expiresAt    DateTime?
  receipts     UrgentMemoReceipt[]
}

model AppSetting {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
}

model UrgentMemoReceipt {
  id     String     @id @default(cuid())
  memoId String
  userId String
  readAt DateTime   @default(now())
  user   User       @relation(fields: [userId], references: [id])
  memo   UrgentMemo @relation(fields: [memoId], references: [id])

  @@unique([memoId, userId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  details   String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Event {
  id           String      @id @default(cuid())
  title        String
  description  String?
  location     String?
  audience     String
  targetUserId String?
  startAt      DateTime
  endAt        DateTime
  createdAt    DateTime    @default(now())
  rsvps        EventRsvp[]

  @@index([startAt])
}

model EventRsvp {
  eventId   String
  userId    String
  status    String
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])

  @@id([eventId, userId])
}

model MessageTemplate {
  id          String   @id @default(cuid())
  title       String
  body        String
  tags        String?
  scope       String   @default("ALL")
  createdById String
  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model NotificationPreference {
  id     String @id @default(cuid())
  userId String
  key    String
  value  String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, key])
}

model StudentNote {
  id         String   @id @default(cuid())
  studentId  String
  authorId   String
  body       String
  visibility String   @default("STAFF")
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id])
  student    Student  @relation(fields: [studentId], references: [id])
}

model DailyLog {
  id         String   @id @default(cuid())
  studentId  String
  authorId   String
  date       DateTime @default(now())
  activities String?
  meals      String?
  naps       String?
  notes      String?
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id])
  student    Student  @relation(fields: [studentId], references: [id])
}

model ProgressReport {
  id          String    @id @default(cuid())
  studentId   String
  authorId    String
  title       String
  body        String
  goalsJson   String?
  periodStart DateTime?
  periodEnd   DateTime?
  createdAt   DateTime  @default(now())
  author      User      @relation(fields: [authorId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])
}

model TherapistAvailability {
  id          String   @id @default(cuid())
  therapistId String
  weekday     Int
  startTime   String
  endTime     String
  createdAt   DateTime @default(now())
  therapist   User     @relation(fields: [therapistId], references: [id])

  @@index([therapistId, weekday])
}

model Appointment {
  id          String   @id @default(cuid())
  therapistId String
  parentId    String
  studentId   String
  startAt     DateTime
  endAt       DateTime
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  student     Student  @relation(fields: [studentId], references: [id])
  parent      User     @relation("apptParent", fields: [parentId], references: [id])
  therapist   User     @relation("apptTherapist", fields: [therapistId], references: [id])

  @@index([therapistId, startAt])
}

model ProfileChangeRequest {
  id         String    @id @default(cuid())
  userId     String
  fieldsJson String
  status     String    @default("PENDING")
  reason     String?
  createdAt  DateTime  @default(now())
  reviewedAt DateTime?
  user       User      @relation(fields: [userId], references: [id])

  @@index([userId, status])
}

model WorkShift {
  id          String   @id @default(cuid())
  therapistId String
  studentId   String?
  startAt     DateTime
  endAt       DateTime
  status      String   @default("SCHEDULED")
  createdAt   DateTime @default(now())
  student     Student? @relation(fields: [studentId], references: [id])
  therapist   User     @relation(fields: [therapistId], references: [id])

  @@index([therapistId, startAt])
}

model ClockEntry {
  id          String    @id @default(cuid())
  therapistId String
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  therapist   User      @relation(fields: [therapistId], references: [id])

  @@index([therapistId, startedAt])
}

// Invitation system for controlled user onboarding
model Invite {
  id            String   @id @default(cuid())
  email         String
  role          String
  token         String   @unique
  createdById   String
  createdAt     DateTime @default(now())
  expiresAt     DateTime?
  consumedAt    DateTime?
  consumedById  String?
  createdBy     User     @relation("inviteCreator", fields: [createdById], references: [id])
  consumedBy    User?    @relation("inviteConsumer", fields: [consumedById], references: [id])

  @@index([email, consumedAt])
}
