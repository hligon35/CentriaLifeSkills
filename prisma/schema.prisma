generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // Insert organization-specific database credentials
}

model User {
  id                    String              @id @default(cuid())
  email                 String              @unique
  name                  String?
  role                  String
  passwordHash          String
  photoUrl              String?
  childProfile          String?
  language              String?             // preferred language code, e.g., 'en', 'es'
  icsToken              String?             @unique // token for personal ICS feed
  createdAt             DateTime            @default(now())
  messagesSent          Message[]           @relation("messagesSent")
  messagesRecv          Message[]           @relation("messagesRecv")
  posts                 Post[]
  comments              Comment[]
  notifications         Notification[]
  likes                 PostLike[]
  // Back-relations for Student model
  studentsAsParent      Student[]           @relation("parent")
  studentsAsAmTherapist Student[]           @relation("amTherapist")
  studentsAsPmTherapist Student[]           @relation("pmTherapist")
  // BCBA (head therapist) assignment
  studentsAsBcba       Student[]           @relation("bcba")
  // Back-relations added to satisfy relations
  urgentMemoReceipts    UrgentMemoReceipt[]
  auditLogs             AuditLog[]
  preferences           NotificationPreference[]
  availability          TherapistAvailability[]
  appointmentsAsTherapist Appointment[]     @relation("apptTherapist")
  appointmentsAsParent    Appointment[]     @relation("apptParent")
  rsvps                 EventRsvp[]
  messageTemplates      MessageTemplate[]
  notesAuthored         StudentNote[]
  dailyLogsAuthored     DailyLog[]
  progressReportsAuthored ProgressReport[]
  profileChangeRequests ProfileChangeRequest[]
}

model Message {
  id         String    @id @default(cuid())
  sender     User      @relation(fields: [senderId], references: [id], name: "messagesSent")
  senderId   String
  receiver   User      @relation(fields: [receiverId], references: [id], name: "messagesRecv")
  receiverId String
  content    String // ciphertext if E2EE
  mediaUrl   String?
  mediaType  String?
  iv         String? // E2EE IV/base64
  createdAt  DateTime  @default(now())
  readAt     DateTime?
  channel    String    @default("DIRECT") // DIRECT | STAFF | NOTICE
  attachments MessageAttachment[]
}

model MessageAttachment {
  id        String   @id @default(cuid())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  url       String   // e.g., s3://bucket/key or https url
  mimeType  String
  duration  Int?     // seconds for audio/video
  createdAt DateTime @default(now())
}

model Post {
  id        String     @id @default(cuid())
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  title     String
  body      String // can be markdown; sanitize on render
  imageUrl  String?
  createdAt DateTime   @default(now())
  comments  Comment[]
  likes     PostLike[]
  pinned    Boolean    @default(false)
  category  String?    // e.g., ANNOUNCEMENT | EVENT | NEWSLETTER
  tags      String?    // comma-separated for SQLite
}

model Comment {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  body      String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  payload   String
  channel   String // in-app, email, sms
  status    String // queued, sent, failed, read
  createdAt DateTime @default(now())
}

model PostLike {
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
}

// Note: SQLite connector does not support enums. Using String for `role`.

model Student {
  id            String   @id @default(cuid())
  name          String
  parent        User     @relation("parent", fields: [parentId], references: [id])
  parentId      String
  amTherapist   User     @relation("amTherapist", fields: [amTherapistId], references: [id])
  amTherapistId String
  pmTherapist   User     @relation("pmTherapist", fields: [pmTherapistId], references: [id])
  pmTherapistId String
  // Assigned BCBA (head therapist) overseeing this student
  bcba          User?    @relation("bcba", fields: [bcbaId], references: [id])
  bcbaId        String?
  createdAt     DateTime @default(now())
  photoUrl      String?
  notes         StudentNote[]
  dailyLogs     DailyLog[]
  progress      ProgressReport[]
  appointments  Appointment[]
}

// Admin-configured urgent memos displayed to users on login
model UrgentMemo {
  id           String              @id @default(cuid())
  title        String
  body         String
  active       Boolean             @default(true)
  audience     String // ALL | THERAPIST | PARENT | USER
  targetUserId String?
  createdAt    DateTime            @default(now())
  expiresAt    DateTime?
  receipts     UrgentMemoReceipt[]
}

// Simple application settings key/value store (strings for SQLite compatibility)
model AppSetting {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
}

// Track when a user has acknowledged/read a memo, so it won't be shown again
model UrgentMemoReceipt {
  id     String     @id @default(cuid())
  memo   UrgentMemo @relation(fields: [memoId], references: [id])
  memoId String
  user   User       @relation(fields: [userId], references: [id])
  userId String
  readAt DateTime   @default(now())

  @@unique([memoId, userId])
}

// Simple audit log for admin actions
model AuditLog {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  action    String
  entity    String
  entityId  String?
  details   String?
  createdAt DateTime @default(now())
}

// School calendar events
model Event {
  id           String   @id @default(cuid())
  title        String
  description  String?
  location     String?
  audience     String // ALL | THERAPIST | PARENT | USER
  targetUserId String?
  startAt      DateTime
  endAt        DateTime
  createdAt    DateTime @default(now())

  rsvps        EventRsvp[]

  @@index([startAt])
}

model EventRsvp {
  event     Event   @relation(fields: [eventId], references: [id])
  eventId   String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  status    String  // YES | NO | MAYBE
  comment   String?
  createdAt DateTime @default(now())

  @@id([eventId, userId])
}

model MessageTemplate {
  id          String   @id @default(cuid())
  title       String
  body        String
  tags        String?  // comma-separated tags
  scope       String   @default("ALL") // ALL | STAFF | PARENT
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
}

model NotificationPreference {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  key     String
  value   String

  @@unique([userId, key])
}

model StudentNote {
  id         String   @id @default(cuid())
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  body       String
  visibility String   @default("STAFF") // STAFF | PARENT
  createdAt  DateTime @default(now())
}

model DailyLog {
  id         String   @id @default(cuid())
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  date       DateTime @default(now())
  activities String?  // free text or JSON string
  meals      String?
  naps       String?
  notes      String?
  createdAt  DateTime @default(now())
}

model ProgressReport {
  id          String   @id @default(cuid())
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  title       String
  body        String
  goalsJson   String?  // serialized goals/milestones
  periodStart DateTime?
  periodEnd   DateTime?
  createdAt   DateTime @default(now())
}

model TherapistAvailability {
  id          String   @id @default(cuid())
  therapist   User     @relation(fields: [therapistId], references: [id])
  therapistId String
  weekday     Int      // 0=Sun..6=Sat
  startTime   String   // HH:mm
  endTime     String   // HH:mm
  createdAt   DateTime @default(now())

  @@index([therapistId, weekday])
}

model Appointment {
  id            String   @id @default(cuid())
  therapist     User     @relation("apptTherapist", fields: [therapistId], references: [id])
  therapistId   String
  parent        User     @relation("apptParent", fields: [parentId], references: [id])
  parentId      String
  student       Student  @relation(fields: [studentId], references: [id])
  studentId     String
  startAt       DateTime
  endAt         DateTime
  status        String   @default("PENDING") // PENDING | CONFIRMED | CANCELLED
  createdAt     DateTime @default(now())

  @@index([therapistId, startAt])
}

// Therapist-submitted profile change requests (admin review)
model ProfileChangeRequest {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  fieldsJson String   // JSON of requested field changes (email, name, phone, etc.)
  status     String   @default("PENDING") // PENDING | APPROVED | REJECTED
  reason     String?  // optional admin note for rejection/approval
  createdAt  DateTime @default(now())
  reviewedAt DateTime?

  @@index([userId, status])
}
